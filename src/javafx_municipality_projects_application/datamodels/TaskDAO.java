/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javafx_municipality_projects_application.datamodels;

import Utilities.DbUtil;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

/**
 *
 * @author mtsougranis
 */
public class TaskDAO {
    
    /**
     * Method that inserts a new task for a specific action, given the action id
     * @param actionId
     * @return the id of the task that is automatically generated by the dbms
     */
    public static int insertTask(Task task) throws ClassNotFoundException
    {
        int recordInsertedId=-1;
        
        //setup dates to be inserted in the database
        String dateFrom=DbUtil.convertToDbDateFormat(task.getDateFrom());
        String dateTo=DbUtil.convertToDbDateFormat(task.getDateTo());
        //setup boolean values to be inserted in the database
        int completed=DbUtil.convertToMySQLBoolean(task.getCompleted());
              
        //create the sql string
        /*
        String sql="insert into task(actionId,title,dateFrom,dateTo,priority,completed)"
                + "values("+task.getActionId()+",'"+task.getTitle()+"','"+dateFrom+"',"
                + "'"+dateTo+"','"+task.getPriority()+"',"+task.getCompleted()+");";
        */
        
        String sql= "insert into "+Task.DB_TABLE_NAME+"("
                + Task.DB_TABLE_COLUMNS.COLUMN_ACTION_ID+","
                + Task.DB_TABLE_COLUMNS.COLUMN_TITLE+","
                + Task.DB_TABLE_COLUMNS.COLUMN_DATEFROM+","
                + Task.DB_TABLE_COLUMNS.COLUMN_DATETO+","
                + Task.DB_TABLE_COLUMNS.COLUMN_PRIORITY+","
                + Task.DB_TABLE_COLUMNS.COLUMN_COMPLETED+""
                + ")"
                +"values("
                + task.getActionId()+","
                + "'"+task.getTitle()+"',"
                + "'"+dateFrom+"',"
                + "'"+dateTo+"',"
                + "'"+task.getPriority()+"',"
                + ""+task.getCompleted()+""
                + ");";
        try
        {
            recordInsertedId=DbUtil.dbExecuteInsertUpdateQuery(sql);
            return recordInsertedId;
        }
        catch (SQLException e)
        {
            System.out.println("Error while inserting task in the database");
            e.printStackTrace();
        }
        
        return -1;
        
    }
    
    /**
     * Method that updates the task in the database
     * @param the updated task data
     */
    public static void updateTask(Task task) throws ClassNotFoundException
    {
         //setup dates to be inserted in the database
        String dateFrom=DbUtil.convertToDbDateFormat(task.getDateFrom());
        String dateTo=DbUtil.convertToDbDateFormat(task.getDateTo());
        //setup boolean values to be inserted in the database
        int completed=DbUtil.convertToMySQLBoolean(task.getCompleted());
        
        //create the update query
        String sql="update "+Task.DB_TABLE_NAME+" set "
                + Task.DB_TABLE_COLUMNS.COLUMN_ACTION_ID+"="+task.getActionId()+","
                + Task.DB_TABLE_COLUMNS.COLUMN_TITLE+"='"+task.getTitle()+"',"
                + Task.DB_TABLE_COLUMNS.COLUMN_DATEFROM+"='"+dateFrom+"',"
                + Task.DB_TABLE_COLUMNS.COLUMN_DATETO+"='"+dateTo+"',"
                + Task.DB_TABLE_COLUMNS.COLUMN_PRIORITY+"='"+task.getPriority()+"',"
                + Task.DB_TABLE_COLUMNS.COLUMN_COMPLETED+"="+completed+""
                + " where "
                + Task.DB_TABLE_COLUMNS.COLUMN_ID+"="+task.getTaskId();
        try
        {
            DbUtil.dbExecuteInsertUpdateQuery(sql);
        }
        catch (SQLException e)
        {
            System.out.println("Error occured while updating the Task record in the database");
            e.printStackTrace();
            
        }
    }
    
    /**
     * Method that deletes a task, given it's task id
     * @param taskId
     * @return the number of records deleted. In case of exception, returns -1
     * @throws ClassNotFoundException 
     */
    public static int deleteTask(int taskId) throws ClassNotFoundException
    {
        String sql="delete from "+Task.DB_TABLE_NAME+""
                + " where "
                + Task.DB_TABLE_COLUMNS.COLUMN_ID+"="+taskId;
        
        int rowsAffected=0;
        try
        {
            rowsAffected=DbUtil.dbExecuteDeleteQuery(sql);
            System.out.println(rowsAffected+" records deleted");
            return rowsAffected;
        }
        catch (SQLException e)
        {
            System.out.println("Error occured while deleting the record");
            e.printStackTrace();
            return -1;
        }      
    }
    
    /**
     * Method that gets the task data, given a task id
     * @param taskId
     * @return a task object
     */
    
    public static Task getTaskDataByTaskId (int taskId)
    {
        String sql="select * from "+Task.DB_TABLE_NAME
                +" where "
                + Task.DB_TABLE_COLUMNS.COLUMN_ID+"="+taskId;
         try
        {
            //get the resultset data for the specific action
            ResultSet rs=DbUtil.dbExecute(sql);
            if (rs.first())//if there were search results
            {
                boolean completed=rs.getBoolean(Task.DB_TABLE_COLUMNS.COLUMN_COMPLETED);
                
                int id=rs.getInt(Task.DB_TABLE_COLUMNS.COLUMN_ID);
                long daysFrom=DbUtil.convertFromDbDateFormat(
                        rs.getString(Task.DB_TABLE_COLUMNS.COLUMN_DATEFROM)
                );
                long daysTo=DbUtil.convertFromDbDateFormat(
                        rs.getString(Task.DB_TABLE_COLUMNS.COLUMN_DATETO)
                );
                
                
                Task task = new Task(
                        rs.getInt(Task.DB_TABLE_COLUMNS.COLUMN_ID),
                        id,
                        rs.getString(Task.DB_TABLE_COLUMNS.COLUMN_TITLE),
                        daysFrom,
                        daysTo,
                        rs.getString(Task.DB_TABLE_COLUMNS.COLUMN_PRIORITY),
                        completed
                );
                
                return task;
            }
            else //no search results
            {
                return null;
            }
            
        }
        catch (SQLException e)
        {
            System.out.println("Problem with retrieving the data for "
                    + "the specific task from the database");
            e.printStackTrace();
            return null;
        }
        catch (ClassNotFoundException e)
        {
            e.printStackTrace();
            return null;
        }
    }
    
   
    /**
     * Method that gets the task data, given an action id
     * @param actionId
     * @return an array list of tasks
     */
    public static ArrayList<Task> getTaskDataByActionId(int actionId)
    {
        //the array list used for storing the tasks
        ArrayList<Task> taskList=new ArrayList<>();
        
        String sql="select * from "+Task.DB_TABLE_NAME
                + " where "
                +Task.DB_TABLE_COLUMNS.COLUMN_ACTION_ID+"="+String.valueOf(actionId);
          try
        {
            //get the resultset data for the specific action
            ResultSet rs=DbUtil.dbExecute(sql);
            
            
            //while there are records in the resultset
            while (rs.next())//if there were search results
            {
                System.out.println("Record in the record set");
                boolean completed=rs.getBoolean(Task.DB_TABLE_COLUMNS.COLUMN_COMPLETED);
                int id=rs.getInt(Task.DB_TABLE_COLUMNS.COLUMN_ID);
                long daysFrom=DbUtil.convertFromDbDateFormat(
                        rs.getString(Task.DB_TABLE_COLUMNS.COLUMN_DATEFROM)
                );
                long daysTo=DbUtil.convertFromDbDateFormat(
                        rs.getString(Task.DB_TABLE_COLUMNS.COLUMN_DATETO)
                );
                
                //add the tasks in the list
                taskList.add(
                    new Task(
                            rs.getInt(Task.DB_TABLE_COLUMNS.COLUMN_ID),
                            id,
                            rs.getString(Task.DB_TABLE_COLUMNS.COLUMN_TITLE),
                            daysFrom,
                            daysTo,
                            rs.getString(Task.DB_TABLE_COLUMNS.COLUMN_PRIORITY),
                            completed
                    )
                );
                
            }
             return taskList;
            
        }
        catch (SQLException e)
        {
            System.out.println("Problem with retrieving the data for "
                    + "the specific task from the database");
            e.printStackTrace();
            return null;
        }
        catch (ClassNotFoundException e)
        {
            e.printStackTrace();
            return null;
        }  
    }
    
    /**
     * Method that updates multiple tasks. It is necessary that the Task elements
     * of the list have their task id set.
     * @param tasksList 
     */
    public static void updateMultipleTasks(ArrayList<Task> tasksList) throws ClassNotFoundException
    {
        for (int i=0;i<tasksList.size();i++)
        {
            TaskDAO.updateTask(tasksList.get(i));
        }
    }
    
    /**
     * Method that inserts multiple tasks. It is necessary that the Task elements
     * of the list have their action id set.
     * @param tasksList 
     * @return the number of tasks inserted
     */
    public static void insertMultipleTasks(ArrayList<Task> tasksList) throws ClassNotFoundException
    {
        for (int i=0;i<tasksList.size();i++)
        {
            TaskDAO.insertTask(tasksList.get(i));
        }
    }
    
    /**
     * Method that deletes multiple tasks. It is necessary that the Task elements
     * of the list have their task id set.
     * @param tasksList
     */
    public static void deleteMultipleTasks(ArrayList<Task> tasksList) throws ClassNotFoundException
    {
        for (int i=0;i<tasksList.size();i++)
        {
            TaskDAO.deleteTask(tasksList.get(i).getTaskId());
        }
    }
    
}
